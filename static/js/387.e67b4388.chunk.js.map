{"version":3,"file":"static/js/387.e67b4388.chunk.js","mappings":"uPAEaA,EAAIC,EAAAA,GAAAA,GAAF,oEAKFC,EAAKD,EAAAA,GAAAA,GAAH,6FAMFE,EAAMF,EAAAA,GAAAA,IAAH,+FAMHG,EAAIH,EAAAA,GAAAA,EAAH,yDAIDI,EAAOJ,EAAAA,GAAAA,KAAH,2F,SCuBjB,EA1Cc,WACZ,OAAwBK,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEYC,GAAWC,EAAAA,EAAAA,MAAfC,GAKR,OAHAC,EAAAA,EAAAA,YAAU,WACRH,IAAUI,EAAAA,EAAAA,IAAiBJ,GAAQK,KAAKN,GAASO,MAAMC,QAAQC,IAChE,GAAE,CAACR,KAEF,yBACGF,GAAQA,EAAKW,OAAS,GACrB,SAAClB,EAAD,UACGO,EAAKY,KAAI,SAAAC,GAAE,OACV,UAAClB,EAAD,WACGkB,EAAGC,cACF,SAAClB,EAAD,CACEmB,IAAG,yCAAoCF,EAAGC,cAC1CE,IAAKH,EAAGI,UACRC,MAAM,SAGR,SAACtB,EAAD,CACEmB,IAAI,sCACJC,IAAKH,EAAGI,UACRC,MAAM,SAGV,UAACrB,EAAD,8BACiB,SAACC,EAAD,UAAOe,EAAGM,oBAE3B,UAACtB,EAAD,0BACa,UAACC,EAAD,eAAQe,EAAGI,kBAlBjBJ,EAAGT,GADF,OAyBd,SAACN,EAAD,qCAIP,C,+LC3CKsB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAc,eACdC,EAAmB,qBAElB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBH,EAAAA,EAAAA,GAAM,GAAD,OAAIE,GAAoB,CAClDE,OAAQ,CACNC,QAASN,KAHR,cACCO,EADD,yBAMEA,EAASC,KAAKC,SANhB,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,wFACkBV,EAAAA,EAAAA,GAAM,GAAD,OAAIC,GAAe,CAC7CG,OAAQ,CACNC,QAASN,EACTW,MAAOA,KAJN,cACCJ,EADD,yBAOEA,EAASC,KAAKC,SAPhB,kEASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8B5B,GAA9B,wFACkBiB,EAAAA,EAAAA,GAAM,SAAD,OAAUjB,GAAM,CAC1CqB,OAAQ,CACNC,QAASN,KAHR,cACCO,EADD,yBAMEA,EAASC,MANX,kEAQA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,wFACkBiB,EAAAA,EAAAA,GAAM,SAAD,OAAUjB,EAAV,YAAwB,CAClDqB,OAAQ,CACNC,QAASN,KAHR,cACCO,EADD,yBAMEA,EAASC,KAAK5B,MANhB,kEASA,SAAeiC,EAAtB,+CAAO,OAAP,oBAAO,WAAmC7B,GAAnC,wFACkBiB,EAAAA,EAAAA,GAAM,SAAD,OAAUjB,EAAV,YAAwB,CAClDqB,OAAQ,CACNC,QAASN,KAHR,cACCO,EADD,yBAMEA,EAASC,KAAKC,SANhB,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/useApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Ul =styled.ul`\nlist-style: none;\nmargin: 0;\npadding: 0;\n`\nexport const Li = styled.li`\ncolor: #001F54;\nfont-size: 16px;\nfont-family: 'Abel', sans-serif;\n` \n\nexport const Img = styled.img`\nwidth: 150px;\nheight:200px;\nobject-fit: cover;\nborder-radius: 5px;\n`\nexport const P = styled.p`\ncolor:black;\nfont-weight: 600;\n`\nexport const Span = styled.span`\nfont-family: 'Abel', sans-serif;\ncolor: blue;\nfont-weight: 500;\n`","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastOfMovie } from 'services/useApi';\nimport { Img, Li, Ul, P, Span } from './Cast.styled';\n const Cast = () => {\n  const [cast, setCast] = useState(null);\n\n  const { id: filmId } = useParams();\n\n  useEffect(() => {\n    filmId && fetchCastOfMovie(filmId).then(setCast).catch(console.log);\n  }, [filmId]);\n  return (\n    <div>\n      {cast && cast.length > 0 ? (\n        <Ul>\n          {cast.map(el => (\n            <Li key={el.id}>\n              {el.profile_path ? (\n                <Img\n                  src={`https://image.tmdb.org/t/p/w500${el.profile_path}`}\n                  alt={el.character}\n                  width=\"100\"\n                />\n              ) : (\n                <Img\n                  src=\"https://i.stack.imgur.com/YaL3s.jpg\"\n                  alt={el.character}\n                  width=\"100\"\n                />\n              )}\n              <P>\n                Original name: <Span>{el.original_name}</Span>\n              </P>\n              <P>\n                Character: <Span> {el.character}</Span>\n              </P>\n            </Li>\n          ))}\n        </Ul>\n      ) : (\n        <Span>No cast in this movie</Span>\n      )}\n    </div>\n  );\n};\nexport default Cast;","import axios from 'axios';\n\nconst API_KEY = '47a16356b4a0b318c8bcd78a4994c971';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst searchFilms = 'search/movie';\nconst getTrendingFilms = 'trending/movie/day';\n\nexport async function fetchTrendingFilm() {\n  const response = await axios(`${getTrendingFilms}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}\nexport async function fetchSearchFilms(query) {\n  const response = await axios(`${searchFilms}`, {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n  return response.data.results;\n}\nexport async function fetchByMovieId(id) {\n  const response = await axios(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\nexport async function fetchCastOfMovie(id) {\n  const response = await axios(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.cast;\n}\n\nexport async function fetchReviewsOfMovie(id) {\n  const response = await axios(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}"],"names":["Ul","styled","Li","Img","P","Span","useState","cast","setCast","filmId","useParams","id","useEffect","fetchCastOfMovie","then","catch","console","log","length","map","el","profile_path","src","alt","character","width","original_name","API_KEY","axios","searchFilms","getTrendingFilms","fetchTrendingFilm","params","api_key","response","data","results","fetchSearchFilms","query","fetchByMovieId","fetchReviewsOfMovie"],"sourceRoot":""}